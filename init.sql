-- Connect to the pluggable database (XEPDB1)
ALTER SESSION SET CONTAINER = XEPDB1;

-- Create the User
CREATE USER EventEaseDBA IDENTIFIED BY test123;

-- Grant Privileges
GRANT CONNECT, RESOURCE TO EventEaseDBA;
GRANT UNLIMITED TABLESPACE TO EventEaseDBA;

-- Switch to the EventEaseDBA schema
ALTER SESSION SET CURRENT_SCHEMA = EventEaseDBA;

-- Create Tables
CREATE TABLE USERS (
    USERNAME NVARCHAR2(128) CONSTRAINT USER_ID_PK PRIMARY KEY,
    PASSWORD NVARCHAR2(128) NOT NULL,
    ENABLED CHAR(1) CONSTRAINT USER_ENABLED_CK CHECK (ENABLED IN ('Y','N')) NOT NULL
);

CREATE TABLE AUTHORITY_TYPE (
    TYPE_DESCRIPTION NVARCHAR2(128) CONSTRAINT AUTHORITY_TYPE_UK UNIQUE
);

CREATE TABLE AUTHORITIES (
    USERNAME NVARCHAR2(128) NOT NULL,
    AUTHORITY NVARCHAR2(128) NOT NULL
);
ALTER TABLE AUTHORITIES ADD CONSTRAINT AUTHORITIES_UNIQUE UNIQUE (USERNAME, AUTHORITY);
ALTER TABLE AUTHORITIES ADD CONSTRAINT AUTHORITIES_USERNAME_FK FOREIGN KEY (USERNAME) REFERENCES USERS (USERNAME) ENABLE;
ALTER TABLE AUTHORITIES ADD CONSTRAINT AUTHORITIES_AUTHORITY_FK FOREIGN KEY (AUTHORITY) REFERENCES AUTHORITY_TYPE (TYPE_DESCRIPTION) ENABLE;

CREATE TABLE MEMBERS (
    MEMBER_ID NUMBER(10) CONSTRAINT MEMBER_ID_PK PRIMARY KEY,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    PHONE VARCHAR2(20) NOT NULL,
    CREATED_AT DATE NOT NULL,
    USERNAME NVARCHAR2(128) CONSTRAINT MEMBER_USERNAME_FK REFERENCES USERS (USERNAME)
);

CREATE TABLE EVENTS (
    EVENT_ID NUMBER(10) CONSTRAINT EVENT_ID_PK PRIMARY KEY,
    TITLE VARCHAR2(50) NOT NULL,
    DESCRIPTION VARCHAR2(200) NOT NULL,
    CATEGORY VARCHAR2(50) NOT NULL,
    DATE_TIME DATE NOT NULL,
    LOCATION VARCHAR2(50) NOT NULL,
    TOTAL_TICKETS NUMBER(7) NOT NULL,
    TICKETS_SOLD NUMBER(7) NOT NULL,
    PRICE_PER_TICKET NUMBER(7) NOT NULL,
    MEMBER_ID NUMBER(10) CONSTRAINT EVENT_MEMBER_ID_FK REFERENCES MEMBERS (MEMBER_ID),
    CREATED_AT DATE NOT NULL
);

CREATE TABLE PAYMENTS (
    PAYMENT_ID NUMBER(10) CONSTRAINT PAYMENT_ID_PK PRIMARY KEY,
    AMOUNT NUMBER(10) NOT NULL,
    PAYMENT_DATE DATE NOT NULL,
    PAYMENT_METHOD VARCHAR2(200) NOT NULL,
    TRANSACTION_ID VARCHAR2(200) CONSTRAINT PAYMENT_TRANSACTION_UK UNIQUE,
    PAYER_EMAIL VARCHAR2(100) NOT NULL
);

CREATE TABLE TICKETS (
    TICKET_ID NUMBER(10) CONSTRAINT TICKET_ID_PK PRIMARY KEY,
    EVENT_ID NUMBER(10) CONSTRAINT TICKET_EVENT_FK REFERENCES EVENTS (EVENT_ID),
    PAYMENT_ID NUMBER(10) CONSTRAINT TICKET_PAYMENT_FK REFERENCES PAYMENTS (PAYMENT_ID),
    TICKET_CODE VARCHAR2(200) CONSTRAINT TICKET_CODE_UK UNIQUE,
    ATTENDEE_NAME VARCHAR2(200) NOT NULL,
    ATTENDEE_EMAIL VARCHAR2(200) NOT NULL,
    PURCHASE_AT DATE NOT NULL
);

-- Create sequences for each table
CREATE SEQUENCE member_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE event_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE payment_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE ticket_seq START WITH 1 INCREMENT BY 1;

-- Create triggers to auto-populate IDs
CREATE OR REPLACE TRIGGER member_id_trigger
BEFORE INSERT ON MEMBERS
FOR EACH ROW
BEGIN
  SELECT member_seq.NEXTVAL INTO :NEW.MEMBER_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER event_id_trigger
BEFORE INSERT ON EVENTS
FOR EACH ROW
BEGIN
  SELECT event_seq.NEXTVAL INTO :NEW.EVENT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER payment_id_trigger
BEFORE INSERT ON PAYMENTS
FOR EACH ROW
BEGIN
  SELECT payment_seq.NEXTVAL INTO :NEW.PAYMENT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER ticket_id_trigger
BEFORE INSERT ON TICKETS
FOR EACH ROW
BEGIN
  SELECT ticket_seq.NEXTVAL INTO :NEW.TICKET_ID FROM DUAL;
END;
/

-- Insert Authority Types
INSERT INTO AUTHORITY_TYPE (TYPE_DESCRIPTION) VALUES ('ROLE_MEMBER');

-- Insert User
INSERT INTO USERS (USERNAME, PASSWORD, ENABLED) VALUES ('user', '$2a$10$QmkM0KXiapvOLT5Frw6DVe8O5FmT/UZkfKIdKEU57OHhH6eGaXcQ2', 'Y');

INSERT INTO AUTHORITIES (USERNAME, AUTHORITY) VALUES ('user', 'ROLE_MEMBER');

-- Insert Member data first (required for events)
INSERT INTO MEMBERS (FIRST_NAME, LAST_NAME, PHONE, CREATED_AT, USERNAME)
VALUES ('Dummy', 'Member', '555-123-4567', SYSDATE, 'user');

-- Insert 12 dummy events
INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Tech Conference 2023', 'Annual technology conference with industry leaders', 'Technology', TO_DATE('2023-11-15 09:00', 'YYYY-MM-DD HH24:MI'), 'Convention Center', 500, 250, 199, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Jazz Night', 'An evening of smooth jazz with local artists', 'Music', TO_DATE('2023-12-05 19:30', 'YYYY-MM-DD HH24:MI'), 'Downtown Club', 150, 75, 35, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Startup Pitch Competition', 'Local startups pitch to investors', 'Business', TO_DATE('2023-11-22 13:00', 'YYYY-MM-DD HH24:MI'), 'Innovation Hub', 200, 120, 50, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Yoga Retreat', 'Weekend yoga and meditation retreat', 'Wellness', TO_DATE('2023-12-10 08:00', 'YYYY-MM-DD HH24:MI'), 'Mountain Resort', 100, 40, 120, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Food Festival', 'Taste cuisine from around the world', 'Food', TO_DATE('2023-11-25 11:00', 'YYYY-MM-DD HH24:MI'), 'City Park', 1000, 800, 15, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Coding Workshop', 'Hands-on coding workshop for beginners', 'Education', TO_DATE('2023-12-03 10:00', 'YYYY-MM-DD HH24:MI'), 'Tech Campus', 30, 15, 75, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Art Exhibition', 'Contemporary art from local artists', 'Art', TO_DATE('2023-11-18 10:00', 'YYYY-MM-DD HH24:MI'), 'Art Gallery', 300, 150, 20, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Marathon', 'Annual city marathon', 'Sports', TO_DATE('2023-12-17 07:00', 'YYYY-MM-DD HH24:MI'), 'City Center', 5000, 3500, 30, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Book Reading', 'Author reading and book signing', 'Literature', TO_DATE('2023-11-30 18:00', 'YYYY-MM-DD HH24:MI'), 'Central Library', 80, 45, 10, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Wine Tasting', 'Premium wine tasting event', 'Food', TO_DATE('2023-12-09 17:00', 'YYYY-MM-DD HH24:MI'), 'Vineyard Estate', 50, 25, 85, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Comedy Night', 'Stand-up comedy show', 'Entertainment', TO_DATE('2023-11-20 20:00', 'YYYY-MM-DD HH24:MI'), 'Comedy Club', 120, 90, 25, 1, SYSDATE);

INSERT INTO EVENTS (TITLE, DESCRIPTION, CATEGORY, DATE_TIME, LOCATION, TOTAL_TICKETS, TICKETS_SOLD, PRICE_PER_TICKET, MEMBER_ID, CREATED_AT)
VALUES ('Science Fair', 'Interactive science exhibits for all ages', 'Education', TO_DATE('2023-12-12 09:00', 'YYYY-MM-DD HH24:MI'), 'Science Museum', 400, 200, 12, 1, SYSDATE);

-- Commit all changes
COMMIT;